/*
 * @Author: Ling
 * @Date: 2023-02-14 12:36:53
 * @LastEditors: Ling
 * @LastEditTime: 2024-04-13 16:43:27
 * @Description:
 */
import babel from '@babel/core';
import fs from 'fs';
import { debounce, startCase } from 'lodash-es';
import path from 'path';

const fileObj = {
  watcher: undefined as any,
  // fileList: [],
  watchFile: path.resolve('./src/config/router.tsx'),
  pagesPath: path.resolve('./src/pages'),
  srcPath: path.resolve('./src'),
  routerFolder: path.resolve('./src/router'),
  pageLoadingPath: '@/components/PageLoading',
  routerType: 'createBrowserRouter', // createBrowserRouter,createHashRouter
  developmentExtraRoute: '',
  stamp: 0,
  env: '',
};

interface pathItem {
  name: string;
  path: string;
  fp: string;
}

export default function routeScript() {
  fileObj.env = process.env.NODE_ENV;
  return {
    name: 'routeScript',
    configureServer(server) {
      server.watcher.on('add', ifWriteRoute);
      server.watcher.on('change', ifWriteRoute);
      server.watcher.on('unlink', ifWriteRoute);
    },
    async buildStart() {
      await writeRoute(fileObj.watchFile);
    },
  };
}

function readFile() {
  const ast = readASTFromFile();

  // 查找并修改数组元素
  const arrayExpression = ast.program.body.find((node) => {
    return node.type === 'ExportDefaultDeclaration' && node.declaration.type === 'ArrayExpression';
  });
  const myArray = arrayExpression.declaration;
  const routeAst = myArray.elements;

  const flatList = [];
  function handle(data) {
    if (Array.isArray(data)) {
      data.forEach((ele) => {
        ele?.properties?.forEach((item) => {
          if (item.key.name === 'component') {
            flatList.push(item.value.value);
          }
          if (item.key.name === 'children' && item.value.type === 'ArrayExpression') {
            handle(item.value.elements);
          }
        });
      });
    }
  }
  handle(routeAst);
  return { routeFlatList: flatList, routeAst, routeContentAst: ast };
}

let arr_obj = {};

function handleNewRoute(data) {
  if (Array.isArray(data)) {
    data.forEach((ele) => {
      const hasItem = ele?.properties?.find(
        (item) => item.key.name === 'component' && arr_obj[item.value.value],
      );
      // const authItem = ele?.properties?.find((item) => item.key.name === 'auth');
      // const needAuth = authItem && authItem.value.value === false ? false : true;
      if (hasItem) {
        const lazyLoadAST = babel.types.callExpression(babel.types.identifier('LazyLoad'), [
          babel.types.identifier(`routers.${arr_obj[hasItem.value.value].name}`),
        ]);
        ele.properties.push(
          babel.types.objectProperty(babel.types.identifier('element'), lazyLoadAST),
        );
        ele.properties = ele.properties.filter((item) => item.key.name !== 'component');
      }

      ele?.properties?.forEach((item) => {
        if (item.key.name === 'children' && item.value.type === 'ArrayExpression') {
          handleNewRoute(item.value.elements);
        }
      });
    });
  }
}

function ifWriteRoute(path) {
  if (path !== fileObj.watchFile) {
    return;
  }

  writeRouteFn(path);
}

const writeRouteFn = debounce(writeRoute, 100);

async function writeRoute(path) {
  if (path !== fileObj.watchFile) {
    return;
  }
  try {
    const { routeFlatList, routeAst, routeContentAst } = readFile();

    if (!fs.existsSync(fileObj.routerFolder)) {
      fs.mkdirSync(fileObj.routerFolder);
      console.log(`文件夹创建成功`);
    }

    const t = Date.now();
    fileObj.stamp = t;
    const arr = (await fileDisplay(fileObj.pagesPath, t)) as pathItem[];
    arr.sort((a, b) => (a.name > b.name ? 1 : -1));
    const arr_filter: pathItem[] = [];
    arr_obj = {};
    arr.forEach((item) => {
      if (routeFlatList.includes(item.fp)) {
        arr_filter.push(item);
        arr_obj[item.fp] = item;
      }
    });

    handleNewRoute(routeAst);

    const newContent = `// @ts-nocheck
// This file is generated by Plugin automatically
// ------------------------------------------ //
// ------- DO NOT CHANGE IT MANUALLY! ------- //
// --------   手 动 修 改 不 会 生 效   -------- //
// ------------------------------------------ //

import React from 'react';

import * as routers from './component';
const LazyLoad = routers.LazyLoad;

${generateCodeFromAST(routeContentAst)}
`;

    const pageLoadingContent = `
${fileObj.pageLoadingPath ? `import PageLoading from '${fileObj.pageLoadingPath}'` : ''};
export const LazyLoad = (Component: React.LazyExoticComponent<React.ComponentType<any>>) => {
  return (
    <Suspense fallback={${fileObj.pageLoadingPath ? '<PageLoading />' : 'null'}}>
      <Component />
    </Suspense>
  );
};`;

    const fileList = arr_filter;
    let componentContent = `// @ts-nocheck
// This file is generated by Plugin automatically
// ------------------------------------------ //
// ------- DO NOT CHANGE IT MANUALLY! ------- //
// --------   手 动 修 改 不 会 生 效   -------- //
// ------------------------------------------ //

import { lazy, Suspense } from 'react';
${pageLoadingContent}

`;

    const extraRoute = `import demoRoutes from '${fileObj.developmentExtraRoute}'

const root = routesConfig.find(item=>item.path === '/');
root.children = root.children.concat(demoRoutes)
`;

    const routeIndexContent = `// @ts-nocheck
// This file is generated by Plugin automatically
// ------------------------------------------ //
// ------- DO NOT CHANGE IT MANUALLY! ------- //
// --------   手 动 修 改 不 会 生 效   -------- //
// ------------------------------------------ //

import { ${fileObj.routerType} } from 'react-router-dom';

import routesConfig from './router';

${fileObj.env === 'development' && fileObj.developmentExtraRoute ? extraRoute : ''}
export const routes = ${fileObj.routerType}(routesConfig, {
  ${fileObj.routerType === 'createBrowserRouter' ? 'basename: import.meta.env.BASE_URL' : ''}
});
`;

    fileList.forEach((item) => {
      componentContent += `export const ${item.name} = lazy(() => import('${item.path}'));
`;
    });
    fs.writeFile(fileObj.routerFolder + '/component.tsx', componentContent, function (err) {
      if (err) {
        console.error('写入 routerComponent 文件失败');
      }
    });
    fs.writeFile(fileObj.routerFolder + '/router.tsx', newContent, function (err) {
      if (err) {
        console.error('写入 routerPath 文件失败');
      }
    });
    fs.writeFile(fileObj.routerFolder + '/index.tsx', routeIndexContent, function (err) {
      if (err) {
        console.error('写入 routerIndex 文件失败');
      }
    });
    console.log(new Date().toLocaleTimeString('en', { hour12: false }), '------- write route');
    // fileObj.fileList = fileList;
  } catch (error) {
    console.log('write error', error);
  }
}

function fileDisplay(url, t) {
  let timer = null;
  let arr: pathItem[] = [];
  return new Promise((resolve, reject) => {
    handle(url, t);
    function handle(url, t) {
      if (fileObj.stamp !== t) {
        reject();
        return;
      }
      const filePath = path.resolve(url);
      fs.readdir(filePath, (err, files) => {
        if (err) {
          return;
        }
        files.forEach((filename) => {
          if (
            filename === 'components' ||
            filename === 'component' ||
            // ['components', 'component'].includes(filename) ||
            filename.startsWith('_')
          ) {
            return;
          }
          const filedir = path.join(filePath, filename);
          fs.stat(filedir, (eror, stats) => {
            if (eror) {
              console.error('Error:(spec)', err);
              return;
            }
            const isFile = stats.isFile() && (filename.endsWith('tsx') || filedir.endsWith('jsx'));
            const isDir = stats.isDirectory();
            if (isFile) {
              const fpath = filedir.replace(fileObj.srcPath, '@').replace(/\\/g, '/');
              const fp = fpath.replace(/^@\/pages/, '.');
              let fname = fpath.replace(/index.tsx$/, '').replace(/(^@\/pages|\.tsx$)/g, '');
              fname = startCase(fname).replace(/ /g, '');
              if (fileObj.stamp !== t) {
                return;
              }
              let fp_arr = [fp, fp.replace(/\/index.tsx$/, ''), fp.replace(/\.tsx$/, '')];

              // fp_arr = [...new Set(fp_arr)];
              fp_arr = Array.from(new Set(fp_arr));

              arr = arr.concat(fp_arr.map((item) => ({ name: fname, path: fpath, fp: item })));

              // arr.push({ name: fname, path: fpath });

              if (fileObj.stamp !== t) {
                reject();
                return;
              }

              if (timer) {
                clearTimeout(timer);
              }
              timer = setTimeout(() => resolve(arr), 200);
            }
            if (isDir) handle(filedir, t);
          });
        });
      });
    }
  });
}

const readASTFromFile = () => {
  const code = fs.readFileSync(fileObj.watchFile, 'utf8');
  return babel.parseSync(code, {
    sourceType: 'module',
    plugins: ['@babel/plugin-syntax-jsx'],
  });
};
const generateCodeFromAST = (ast) => {
  const { code } = babel.transformFromAstSync(ast, null, {
    plugins: ['@babel/plugin-transform-react-jsx'],
  });
  return code;
};
